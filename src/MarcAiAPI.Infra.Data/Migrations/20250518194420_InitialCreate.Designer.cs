// <auto-generated />
using System;
using MarcAiAPI.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarcAiAPI.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250518194420_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryEntityStoreEntity", b =>
                {
                    b.Property<long>("CategoriesCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoresStoreId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoriesCategoryId", "StoresStoreId");

                    b.HasIndex("StoresStoreId");

                    b.ToTable("CategoryEntityStoreEntity");
                });

            modelBuilder.Entity("CategoryEntitySubcategoryEntity", b =>
                {
                    b.Property<long>("CategoriesCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubcategoriesSubcategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("CategoriesCategoryId", "SubcategoriesSubcategoryId");

                    b.HasIndex("SubcategoriesSubcategoryId");

                    b.ToTable("CategoryEntitySubcategoryEntity");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Address.StoreAddressEntity", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("AddressId");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.ToTable("StoreAddress", (string)null);
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Category.CategoryEntity", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Person.PersonEntity", b =>
                {
                    b.Property<long>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PersonId"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsSeller")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("PersonId");

                    b.ToTable("Persons", (string)null);
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Review.ReviewEntity", b =>
                {
                    b.Property<long>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ReviewId"));

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ReviewRating")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ReviewTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("ReviewId");

                    b.HasIndex("PersonId");

                    b.HasIndex("StoreId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Seller.SellerEntity", b =>
                {
                    b.Property<long>("SellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SellerId"));

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("SellerId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Sellers", (string)null);
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Store.StoreEntity", b =>
                {
                    b.Property<long>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StoreId"));

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("StoreDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("StoreId");

                    b.HasIndex("SellerId");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Store.StorePhoto", b =>
                {
                    b.Property<long>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PhotoId"));

                    b.Property<bool>("IsMainPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("PhotoCaption")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("PhotoId");

                    b.HasIndex("StoreId");

                    b.ToTable("StorePhotos", (string)null);
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Subcategory.SubcategoryEntity", b =>
                {
                    b.Property<long>("SubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SubcategoryId"));

                    b.Property<string>("SubcategoryDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SubcategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("SubcategoryId");

                    b.ToTable("Subcategories", (string)null);
                });

            modelBuilder.Entity("CategoryEntityStoreEntity", b =>
                {
                    b.HasOne("MarcAiAPI.Domain.Entities.Category.CategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarcAiAPI.Domain.Entities.Store.StoreEntity", null)
                        .WithMany()
                        .HasForeignKey("StoresStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryEntitySubcategoryEntity", b =>
                {
                    b.HasOne("MarcAiAPI.Domain.Entities.Category.CategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarcAiAPI.Domain.Entities.Subcategory.SubcategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("SubcategoriesSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Address.StoreAddressEntity", b =>
                {
                    b.HasOne("MarcAiAPI.Domain.Entities.Store.StoreEntity", "Store")
                        .WithOne("StoreAddress")
                        .HasForeignKey("MarcAiAPI.Domain.Entities.Address.StoreAddressEntity", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Review.ReviewEntity", b =>
                {
                    b.HasOne("MarcAiAPI.Domain.Entities.Person.PersonEntity", "Person")
                        .WithMany("Reviews")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarcAiAPI.Domain.Entities.Store.StoreEntity", "Store")
                        .WithMany("Reviews")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Seller.SellerEntity", b =>
                {
                    b.HasOne("MarcAiAPI.Domain.Entities.Person.PersonEntity", "Person")
                        .WithOne("Seller")
                        .HasForeignKey("MarcAiAPI.Domain.Entities.Seller.SellerEntity", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Store.StoreEntity", b =>
                {
                    b.HasOne("MarcAiAPI.Domain.Entities.Seller.SellerEntity", "Seller")
                        .WithMany("Stores")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Store.StorePhoto", b =>
                {
                    b.HasOne("MarcAiAPI.Domain.Entities.Store.StoreEntity", "Store")
                        .WithMany("Photos")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Person.PersonEntity", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Seller.SellerEntity", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Store.StoreEntity", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Reviews");

                    b.Navigation("StoreAddress")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
