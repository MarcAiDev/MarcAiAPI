// <auto-generated />
using System;
using MarcAiAPI.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MarcAiAPI.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250524182213_NewDb2")]
    partial class NewDb2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Address.StoreAddressEntity", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("AddressId");

                    b.HasIndex("StoreId")
                        .IsUnique();

                    b.HasIndex("StoreId1");

                    b.ToTable("StoreAddress", (string)null);
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Store.MarketplaceEntity", b =>
                {
                    b.Property<long>("MarketplaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MarketplaceId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("MarketplaceId");

                    b.ToTable("Marketplaces", (string)null);
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Store.StoreEntity", b =>
                {
                    b.Property<long>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StoreId"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("MarketplaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SubCategory")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("StoreId");

                    b.HasIndex("MarketplaceId");

                    b.HasIndex("SellerId");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.User.UserEntity", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Address.StoreAddressEntity", b =>
                {
                    b.HasOne("MarcAiAPI.Domain.Entities.Store.StoreEntity", null)
                        .WithOne("StoreAddress")
                        .HasForeignKey("MarcAiAPI.Domain.Entities.Address.StoreAddressEntity", "StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarcAiAPI.Domain.Entities.Store.StoreEntity", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId1");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Store.StoreEntity", b =>
                {
                    b.HasOne("MarcAiAPI.Domain.Entities.Store.MarketplaceEntity", "Marketplace")
                        .WithMany("Stores")
                        .HasForeignKey("MarketplaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MarcAiAPI.Domain.Entities.User.UserEntity", "Seller")
                        .WithMany("Stores")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marketplace");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Store.MarketplaceEntity", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.Store.StoreEntity", b =>
                {
                    b.Navigation("StoreAddress");
                });

            modelBuilder.Entity("MarcAiAPI.Domain.Entities.User.UserEntity", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
